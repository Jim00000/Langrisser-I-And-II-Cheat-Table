<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="29">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"========== Langrisser I &amp; II Cheat Table by Jim00000  =========="</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Get Fund Pointer"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,StWork:AddMoney+10)
define(bytes,48 63 88 94 00 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,StWork:AddMoney+10)

label(code)
label(return)
label(FUND)

registersymbol(FUND)

newmem:
 push rbx
 lea rbx, [rax+00000094]
 mov [FUND], rbx
 pop rbx

code:
  movsxd rcx,dword ptr [rax+00000094]
  jmp return

FUND:
  dq 0

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // movsxd  rcx,dword ptr [rax+00000094]

dealloc(newmem)
unregistersymbol(FUND)

{
// ORIGINAL CODE - INJECTION POINT: 1B15CDB0

1B15CD94: 01 50 00                       -  add [rax+00],edx
1B15CD97: 00 00                          -  add [rax],al
1B15CD99: 00 00                          -  add [rax],al
1B15CD9B: 00 00                          -  add [rax],al
1B15CD9D: 00 00                          -  add [rax],al
1B15CD9F: 00 48 83                       -  add [rax-7D],cl
1B15CDA2: EC                             -  in al,dx
1B15CDA3: 08 48 89                       -  or [rax-77],cl
1B15CDA6: 0C 24                          -  or al,24
1B15CDA8: 48 8B 04 25 10 FE 29 02        -  mov rax,[0229FE10]
// ---------- INJECTING HERE ----------
1B15CDB0: 48 63 88 94 00 00 00           -  movsxd  rcx,dword ptr [rax+00000094]
// ---------- DONE INJECTING  ----------
1B15CDB7: 03 0C 24                       -  add ecx,[rsp]
1B15CDBA: 89 88 94 00 00 00              -  mov [rax+00000094],ecx
1B15CDC0: 48 8B 04 25 10 FE 29 02        -  mov rax,[0229FE10]
1B15CDC8: 48 63 80 94 00 00 00           -  movsxd  rax,dword ptr [rax+00000094]
1B15CDCF: 3D 80 96 98 00                 -  cmp eax,00989680
1B15CDD4: 7C 12                          -  jl 1B15CDE8
1B15CDD6: 48 8B 04 25 10 FE 29 02        -  mov rax,[0229FE10]
1B15CDDE: C7 80 94 00 00 00 7F 96 98 00  -  mov [rax+00000094],0098967F
1B15CDE8: 48 8B 04 25 10 FE 29 02        -  mov rax,[0229FE10]
1B15CDF0: 48 63 80 94 00 00 00           -  movsxd  rax,dword ptr [rax+00000094]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11</ID>
              <Description>"Fund"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>Fund</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"God Mode (effect on Player/Ally)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:AddHP+3a)
define(bytes,89 48 60 48 8B 47 18)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:AddHP+3a)

label(code)
label(writeBackMemory)
label(return)

newmem:
  // rax+3C = GameCommon.UnitWork::playerType (System.Int32)
  // Expect 0 --- human player
  // Expect 1 --- alliance AI
  // Expect 2 --- enemy AI
  cmp [rax+3C], 1
  jle code

writeBackMemory:
  // rax    = GameCommon.UnitWork
  // rax+60 = GameCommon.UnitWork::HP (System.Int32)
  mov [rax+60],ecx
code:
  mov rax,[rdi+18]
  jmp return

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // mov [rax+60],ecx
  // mov rax,[rdi+18]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1B19FE9A

1B19FE6E: 48 89 55 E8                    -  mov [rbp-18],rdx
1B19FE72: BA 01 00 00 00                 -  mov edx,00000001
1B19FE77: 48 83 EC 20                    -  sub rsp,20
1B19FE7B: 49 BB 22 A2 14 1B 00 00 00 00  -  mov r11,000000001B14A222
1B19FE85: 41 FF D3                       -  call r11
1B19FE88: 48 83 C4 20                    -  add rsp,20
1B19FE8C: 4C 8B F8                       -  mov r15,rax
1B19FE8F: 48 8B 47 18                    -  mov rax,[rdi+18]
1B19FE93: 48 63 48 60                    -  movsxd  rcx,dword ptr [rax+60]
1B19FE97: 03 4D E8                       -  add ecx,[rbp-18]
// ---------- INJECTING HERE ----------
1B19FE9A: 89 48 60                       -  mov [rax+60],ecx
1B19FE9D: 48 8B 47 18                    -  mov rax,[rdi+18]
// ---------- DONE INJECTING  ----------
1B19FEA1: 48 63 40 60                    -  movsxd  rax,dword ptr [rax+60]
1B19FEA5: 83 F8 FF                       -  cmp eax,-01
1B19FEA8: 7F 0B                          -  jg 1B19FEB5
1B19FEAA: 48 8B 47 18                    -  mov rax,[rdi+18]
1B19FEAE: C7 40 60 00 00 00 00           -  mov [rax+60],00000000
1B19FEB5: 48 8B 47 18                    -  mov rax,[rdi+18]
1B19FEB9: 48 63 40 60                    -  movsxd  rax,dword ptr [rax+60]
1B19FEBD: 41 3B C7                       -  cmp eax,r15d
1B19FEC0: 7E 08                          -  jle 1B19FECA
1B19FEC2: 48 8B 47 18                    -  mov rax,[rdi+18]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"No MP Consumption (effect on Player/Ally)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:AddMP+3a)
define(bytes,89 48 64 48 8B 47 18)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:AddMP+3a)

label(code)
label(writeBackMemory)
label(return)

newmem:
  // rax+3C = GameCommon.UnitWork::playerType (System.Int32)
  // Expect 0 --- human player
  // Expect 1 --- alliance AI
  // Expect 2 --- enemy AI
  cmp [rax+3C], 1
  jle code

writeBackMemory:
  // rax    = GameCommon.UnitWork
  // rax+64 = GameCommon.UnitWork::MP (System.Int32)
  mov [rax+64],ecx
code:
  mov rax,[rdi+18]
  jmp return

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // mov [rax+64],ecx
  // mov rax,[rdi+18]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1F2E349A

1F2E346E: 48 89 55 E8                    -  mov [rbp-18],rdx
1F2E3472: BA 01 00 00 00                 -  mov edx,00000001
1F2E3477: 48 83 EC 20                    -  sub rsp,20
1F2E347B: 49 BB 0E A2 14 1B 00 00 00 00  -  mov r11,000000001B14A20E
1F2E3485: 41 FF D3                       -  call r11
1F2E3488: 48 83 C4 20                    -  add rsp,20
1F2E348C: 4C 8B F8                       -  mov r15,rax
1F2E348F: 48 8B 47 18                    -  mov rax,[rdi+18]
1F2E3493: 48 63 48 64                    -  movsxd  rcx,dword ptr [rax+64]
1F2E3497: 03 4D E8                       -  add ecx,[rbp-18]
// ---------- INJECTING HERE ----------
1F2E349A: 89 48 64                       -  mov [rax+64],ecx
1F2E349D: 48 8B 47 18                    -  mov rax,[rdi+18]
// ---------- DONE INJECTING  ----------
1F2E34A1: 48 63 40 64                    -  movsxd  rax,dword ptr [rax+64]
1F2E34A5: 83 F8 FF                       -  cmp eax,-01
1F2E34A8: 7F 0B                          -  jg 1F2E34B5
1F2E34AA: 48 8B 47 18                    -  mov rax,[rdi+18]
1F2E34AE: C7 40 64 00 00 00 00           -  mov [rax+64],00000000
1F2E34B5: 48 8B 47 18                    -  mov rax,[rdi+18]
1F2E34B9: 48 63 40 64                    -  movsxd  rax,dword ptr [rax+64]
1F2E34BD: 41 3B C7                       -  cmp eax,r15d
1F2E34C0: 7E 08                          -  jle 1F2E34CA
1F2E34C2: 48 8B 47 18                    -  mov rax,[rdi+18]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"No Magic Effect Timer Decrement (effect on Player/Ally)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:UpdateMagicEffectTimer+80)
define(bytes,FF C9 66 89 08)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:UpdateMagicEffectTimer+80)

label(writeBackMemory)
label(return)
label(decreaseMagicEffectTimer)

newmem:
  // rsi    : UnitCTRL
  // rsi+18 : GameCommon.UnitWork
  // ------------------------------
  // ecx    : magicEffectTimerCount
  push rsi
  // Get UnitWork Address
  mov rsi, [rsi+18]
  // Check GameCommon.UnitWork::playerType. If this unit is a human player or an
  // AI alliance, skip the instruction which decrease the timer of a certain
  // magic effect
  cmp [rsi+3c], 1
  pop rsi
  jle writeBackMemory

decreaseMagicEffectTimer:
  dec ecx
writeBackMemory:
  mov [rax],cx
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // dec ecx
  // mov [rax],cx

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: UnitCTRL:UpdateMagicEffectTimer+80

07ADABE6: 48 0F BF 00                    -  movsx rax,word ptr [rax]
07ADABEA: 83 F8 63                       -  cmp eax,63
07ADABED: 0F 8D 5E 00 00 00              -  jnl 07ADAC51
07ADABF3: 48 8B 46 18                    -  mov rax,[rsi+18]
07ADABF7: 48 8B 40 18                    -  mov rax,[rax+18]
07ADABFB: 48 63 CF                       -  movsxd  rcx,edi
07ADABFE: 39 48 18                       -  cmp [rax+18],ecx
07ADAC01: 0F 86 C9 00 00 00              -  jbe 07ADACD0
07ADAC07: 48 8D 44 48 20                 -  lea rax,[rax+rcx*2+20]
07ADAC0C: 48 0F BF 08                    -  movsx rcx,word ptr [rax]
// ---------- INJECTING HERE ----------
07ADAC10: FF C9                          -  dec ecx
07ADAC12: 66 89 08                       -  mov [rax],cx
// ---------- DONE INJECTING  ----------
07ADAC15: 48 8B 46 18                    -  mov rax,[rsi+18]
07ADAC19: 48 8B 40 18                    -  mov rax,[rax+18]
07ADAC1D: 48 63 CF                       -  movsxd  rcx,edi
07ADAC20: 39 48 18                       -  cmp [rax+18],ecx
07ADAC23: 0F 86 90 00 00 00              -  jbe 07ADACB9
07ADAC29: 48 8D 44 48 20                 -  lea rax,[rax+rcx*2+20]
07ADAC2E: 48 0F BF 00                    -  movsx rax,word ptr [rax]
07ADAC32: 85 C0                          -  test eax,eax
07ADAC34: 7F 1B                          -  jg 07ADAC51
07ADAC36: 48 8B CE                       -  mov rcx,rsi
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Full Move Range (effect on Player)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:GetMoveRange+b8)
define(bytes,49 8B C6 48 8D 65 E8)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:GetMoveRange+b8)

label(code)
label(return)

newmem:
 // rax    : range
 // rdi    : UnitCtrl
 // rdi+18 : GameCommon.UnitWork
 push rbx
 push rdi

 mov rdi, [rdi+18]
 // rdi+3c : GameCommon.UnitWork::playerType (System.Int32)
 // expect 0 : human player
 cmp [rdi+3c], 0

 pop rdi
 pop rbx
 // No effect if the unit is not player-controlled
 jne code
 mov r14, #999

code:
  mov rax,r14
  lea rsp,[rbp-18]
  jmp return

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // mov rax,r14
  // lea rsp,[rbp-18]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1B642DD8

1B642DB3: 41 FF D3                       -  call r11
1B642DB6: 48 83 C4 20                    -  add rsp,20
1B642DBA: 89 45 E4                       -  mov [rbp-1C],eax
1B642DBD: 44 03 75 E4                    -  add r14d,[rbp-1C]
1B642DC1: 33 C0                          -  xor eax,eax
1B642DC3: 41 83 FE FF                    -  cmp r14d,-01
1B642DC7: 4C 0F 4E F0                    -  cmovle r14,rax
1B642DCB: B8 1E 00 00 00                 -  mov eax,0000001E
1B642DD0: 41 83 FE 1F                    -  cmp r14d,1F
1B642DD4: 4C 0F 4D F0                    -  cmovge r14,rax
// ---------- INJECTING HERE ----------
1B642DD8: 49 8B C6                       -  mov rax,r14
1B642DDB: 48 8D 65 E8                    -  lea rsp,[rbp-18]
// ---------- DONE INJECTING  ----------
1B642DDF: 41 5E                          -  pop r14
1B642DE1: 5F                             -  pop rdi
1B642DE2: 5E                             -  pop rsi
1B642DE3: C9                             -  leave 
1B642DE4: C3                             -  ret 
1B642DE5: 00 00                          -  add [rax],al
1B642DE7: 00 00                          -  add [rax],al
1B642DE9: 00 00                          -  add [rax],al
1B642DEB: 00 C5                          -  add ch,al
1B642DED: 00 00                          -  add [rax],al
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Unlimited Move In This Turn (effect on Player)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:SetMoveState+10)
define(bytes,89 70 48 83 FE 03)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:SetMoveState+10)

label(code)
label(return)

newmem:
  // rax = GameCommon.UnitWork
  // rax+3c : GameCommon.UnitWork::playerType (System.Int32)
  // expect 0 : human player
  // If this unit is not player-controlled, skip it
  cmp [rax+3c], 0
  jne code
  // set move state as unmoved
  mov esi, 0

code:
  mov [rax+48],esi
  cmp esi,03
  jmp return

address:
  jmp newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [rax+48],esi
  // cmp esi,03

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SetMoveState+10

1B67381A: 9D                             -  popfq 
1B67381B: 12 00                          -  adc al,byte ptr [rax]
1B67381D: 00 00                          -  add [rax],al
1B67381F: 00 55 48                       -  add [rbp+48],dl
1B673822: 8B EC                          -  mov ebp,esp
1B673824: 56                             -  push rsi
1B673825: 57                             -  push rdi
1B673826: 48 8B F9                       -  mov rdi,rcx
1B673829: 48 8B F2                       -  mov rsi,rdx
1B67382C: 48 8B 47 18                    -  mov rax,[rdi+18]
// ---------- INJECTING HERE ----------
1B673830: 89 70 48                       -  mov [rax+48],esi
1B673833: 83 FE 03                       -  cmp esi,03
// ---------- DONE INJECTING  ----------
1B673836: 75 1F                          -  jne 1B673857
1B673838: 48 8B CF                       -  mov rcx,rdi
1B67383B: BA 01 00 00 00                 -  mov edx,00000001
1B673840: 48 83 EC 20                    -  sub rsp,20
1B673844: 49 BB A0 0A 67 1B 00 00 00 00  -  mov r11,000000001B670AA0
1B67384E: 41 FF D3                       -  call r11
1B673851: 48 83 C4 20                    -  add rsp,20
1B673855: EB 1A                          -  jmp 1B673871
1B673857: 48 8B CF                       -  mov rcx,rdi
1B67385A: 33 D2                          -  xor edx,edx
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Make All Units Become Player-Controlled (i.e. instant win while you end the turn)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:SetPlayerType+18)
define(bytes,89 48 3C 48 8B 47 10)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:SetPlayerType+18)

label(code)
label(return)

newmem:
  // make all units become player-controlled
  mov [rax+3C], 0
code:
  // mov [rax+3C],ecx
  mov rax,[rdi+10]
  jmp return

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // mov [rax+3C],ecx
  // mov rax,[rdi+10]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: UnitCTRL:SetPlayerType+18

1B6708EB: 00 00                          -  add [rax],al
1B6708ED: 00 00                          -  add [rax],al
1B6708EF: 00 55 48                       -  add [rbp+48],dl
1B6708F2: 8B EC                          -  mov ebp,esp
1B6708F4: 57                             -  push rdi
1B6708F5: 48 83 EC 18                    -  sub rsp,18
1B6708F9: 48 8B F9                       -  mov rdi,rcx
1B6708FC: 48 89 55 F0                    -  mov [rbp-10],rdx
1B670900: 48 8B 47 18                    -  mov rax,[rdi+18]
1B670904: 48 63 4D F0                    -  movsxd  rcx,dword ptr [rbp-10]
// ---------- INJECTING HERE ----------
1B670908: 89 48 3C                       -  mov [rax+3C],ecx
1B67090B: 48 8B 47 10                    -  mov rax,[rdi+10]
// ---------- DONE INJECTING  ----------
1B67090F: 48 89 45 E8                    -  mov [rbp-18],rax
1B670913: 48 8B 47 18                    -  mov rax,[rdi+18]
1B670917: 48 63 80 98 00 00 00           -  movsxd  rax,dword ptr [rax+00000098]
1B67091E: 48 89 45 E0                    -  mov [rbp-20],rax
1B670922: 48 8B CF                       -  mov rcx,rdi
1B670925: 48 83 EC 20                    -  sub rsp,20
1B670929: 49 BB F0 00 67 1B 00 00 00 00  -  mov r11,000000001B6700F0
1B670933: 41 FF D3                       -  call r11
1B670936: 48 83 C4 20                    -  add rsp,20
1B67093A: 4C 8B C0                       -  mov r8,rax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Set Class Point (CP) as 999"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:GetClassName+c)
define(bytes,B8 C0 FD CB 04)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:GetClassName+c)

label(code)
label(return)

newmem:
  // rcx = rsi = UnirCTRL
  push rbx
  mov rbx, [rsi+18]
  // rbx    : GameCommon.UnitWork
  // rbx+68 : GameCommon.UnitWork::classPoint (System.Int32)
  // Set class point (CP) as 999
  mov [rbx+68], #999
  pop rbx
code:
  mov eax,04CBFDC0
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // mov eax,04CBFDC0

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1C2FBF8C

1C2FBF74: 01 50 00                       -  add [rax+00],edx
1C2FBF77: 00 00                          -  add [rax],al
1C2FBF79: 00 00                          -  add [rax],al
1C2FBF7B: 00 00                          -  add [rax],al
1C2FBF7D: 00 00                          -  add [rax],al
1C2FBF7F: 00 55 48                       -  add [rbp+48],dl
1C2FBF82: 8B EC                          -  mov ebp,esp
1C2FBF84: 56                             -  push rsi
1C2FBF85: 48 83 EC 08                    -  sub rsp,08
1C2FBF89: 48 8B F1                       -  mov rsi,rcx
// ---------- INJECTING HERE ----------
1C2FBF8C: B8 C0 FD CB 04                 -  mov eax,04CBFDC0
// ---------- DONE INJECTING  ----------
1C2FBF91: 48 63 00                       -  movsxd  rax,dword ptr [rax]
1C2FBF94: 83 F8 01                       -  cmp eax,01
1C2FBF97: 0F 85 49 00 00 00              -  jne 1C2FBFE6
1C2FBF9D: 48 8B 46 30                    -  mov rax,[rsi+30]
1C2FBFA1: 48 8B 40 10                    -  mov rax,[rax+10]
1C2FBFA5: B9 C0 FD CB 04                 -  mov ecx,04CBFDC0
1C2FBFAA: 48 63 09                       -  movsxd  rcx,dword ptr [rcx]
1C2FBFAD: 48 63 C9                       -  movsxd  rcx,ecx
1C2FBFB0: 39 48 18                       -  cmp [rax+18],ecx
1C2FBFB3: 0F 86 6E 00 00 00              -  jbe 1C2FC027
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Set Attack 999 (effect on Player)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:GetP_Attack+147)
define(bytes,49 8B C6 48 8D 65 E8)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:GetP_Attack+147)

label(code)
label(return)

newmem:
  // rdi    : UnitCTRL
  // rdi+18 : GameCommon.UnitWork
  mov rax, [rdi+18]
  // rax+3c : GameCommon.UnitWork::playerType
  // Check whether the unit is player-controlled
  cmp [rax+3c], 0
  jne code

  // If so, set the attack 999
  mov r14, #999

code:
  mov rax,r14
  lea rsp,[rbp-18]
  jmp return

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // mov rax,r14
  // lea rsp,[rbp-18]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: UnitCTRL:GetP_Attack+147

1B616D57: 49 BB 54 47 5F 1B 00 00 00 00  -  mov r11,000000001B5F4754
1B616D61: 41 FF D3                       -  call r11
1B616D64: 48 83 C4 20                    -  add rsp,20
1B616D68: 44 03 F0                       -  add r14d,eax
1B616D6B: B8 01 00 00 00                 -  mov eax,00000001
1B616D70: 45 85 F6                       -  test r14d,r14d
1B616D73: 4C 0F 4E F0                    -  cmovle r14,rax
1B616D77: B8 E7 03 00 00                 -  mov eax,000003E7
1B616D7C: 41 81 FE E8 03 00 00           -  cmp r14d,000003E8
1B616D83: 4C 0F 4D F0                    -  cmovge r14,rax
// ---------- INJECTING HERE ----------
1B616D87: 49 8B C6                       -  mov rax,r14
1B616D8A: 48 8D 65 E8                    -  lea rsp,[rbp-18]
// ---------- DONE INJECTING  ----------
1B616D8E: 41 5E                          -  pop r14
1B616D90: 5F                             -  pop rdi
1B616D91: 5E                             -  pop rsi
1B616D92: C9                             -  leave 
1B616D93: C3                             -  ret 
1B616D94: 00 00                          -  add [rax],al
1B616D96: 00 00                          -  add [rax],al
1B616D98: 00 00                          -  add [rax],al
1B616D9A: 00 00                          -  add [rax],al
1B616D9C: 54                             -  push rsp
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Set Defense 999 (effect on Player)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:GetP_Defense+14d)
define(bytes,49 8B C6 48 8D 65 E8)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:GetP_Defense+14d)

label(code)
label(return)

newmem:
  // rdi    : UnitCTRL
  // rdi+18 : GameCommon.UnitWork
  mov rax, [rdi+18]
  // rax+3c : GameCommon.UnitWork::playerType
  // Check whether the unit is player-controlled
  cmp [rax+3c], 0
  jne code

  // If so, set the defense value 999
  mov r14, #999

code:
  mov rax,r14
  lea rsp,[rbp-18]
  jmp return

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // mov rax,r14
  // lea rsp,[rbp-18]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: UnitCTRL:GetP_Defense+14d

1B6194AD: 49 BB 60 47 5F 1B 00 00 00 00  -  mov r11,000000001B5F4760
1B6194B7: 41 FF D3                       -  call r11
1B6194BA: 48 83 C4 20                    -  add rsp,20
1B6194BE: 44 03 F0                       -  add r14d,eax
1B6194C1: B8 01 00 00 00                 -  mov eax,00000001
1B6194C6: 45 85 F6                       -  test r14d,r14d
1B6194C9: 4C 0F 4E F0                    -  cmovle r14,rax
1B6194CD: B8 E7 03 00 00                 -  mov eax,000003E7
1B6194D2: 41 81 FE E8 03 00 00           -  cmp r14d,000003E8
1B6194D9: 4C 0F 4D F0                    -  cmovge r14,rax
// ---------- INJECTING HERE ----------
1B6194DD: 49 8B C6                       -  mov rax,r14
1B6194E0: 48 8D 65 E8                    -  lea rsp,[rbp-18]
// ---------- DONE INJECTING  ----------
1B6194E4: 41 5E                          -  pop r14
1B6194E6: 5F                             -  pop rdi
1B6194E7: 5E                             -  pop rsi
1B6194E8: C9                             -  leave 
1B6194E9: C3                             -  ret 
1B6194EA: 00 00                          -  add [rax],al
1B6194EC: 00 00                          -  add [rax],al
1B6194EE: 00 00                          -  add [rax],al
1B6194F0: 00 00                          -  add [rax],al
1B6194F2: 00 00                          -  add [rax],al
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>22</ID>
          <Description>"Set M.Attack 999 (effect on Player)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,UnitCTRL:GetM_Attack+14d)
define(bytes,49 8B C6 48 8D 65 E8)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,UnitCTRL:GetM_Attack+14d)

label(code)
label(return)

newmem:
  // rdi    : UnitCTRL
  // rdi+18 : GameCommon.UnitWork
  mov rax, [rdi+18]
  // rax+3c : GameCommon.UnitWork::playerType
  // Check whether the unit is player-controlled
  cmp [rax+3c], 0
  jne code

  // If so, set the attack 999
  mov r14, #999

code:
  mov rax,r14
  lea rsp,[rbp-18]
  jmp return

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // mov rax,r14
  // lea rsp,[rbp-18]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: UnitCTRL:GetM_Attack+14d

1B62E30D: 49 BB 60 47 5F 1B 00 00 00 00  -  mov r11,000000001B5F4760
1B62E317: 41 FF D3                       -  call r11
1B62E31A: 48 83 C4 20                    -  add rsp,20
1B62E31E: 44 03 F0                       -  add r14d,eax
1B62E321: B8 01 00 00 00                 -  mov eax,00000001
1B62E326: 45 85 F6                       -  test r14d,r14d
1B62E329: 4C 0F 4E F0                    -  cmovle r14,rax
1B62E32D: B8 E7 03 00 00                 -  mov eax,000003E7
1B62E332: 41 81 FE E8 03 00 00           -  cmp r14d,000003E8
1B62E339: 4C 0F 4D F0                    -  cmovge r14,rax
// ---------- INJECTING HERE ----------
1B62E33D: 49 8B C6                       -  mov rax,r14
1B62E340: 48 8D 65 E8                    -  lea rsp,[rbp-18]
// ---------- DONE INJECTING  ----------
1B62E344: 41 5E                          -  pop r14
1B62E346: 5F                             -  pop rdi
1B62E347: 5E                             -  pop rsi
1B62E348: C9                             -  leave 
1B62E349: C3                             -  ret 
1B62E34A: 00 00                          -  add [rax],al
1B62E34C: 00 00                          -  add [rax],al
1B62E34E: 00 00                          -  add [rax],al
1B62E350: 00 00                          -  add [rax],al
1B62E352: 00 00                          -  add [rax],al
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Structures StructVersion="2">
    <Structure Name="UnitCTRL" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="16" Vartype="Pointer" Bytesize="8" Description="unitManager" DisplayMethod="Unsigned Integer"/>
        <Element Offset="24" Vartype="Pointer" Bytesize="8" Description="unitWork" DisplayMethod="Unsigned Integer"/>
        <Element Offset="32" Vartype="Pointer" Bytesize="8" Description="unitObject" DisplayMethod="Unsigned Integer"/>
        <Element Offset="40" Vartype="Pointer" Bytesize="8" Description="unitGraphics" DisplayMethod="Unsigned Integer"/>
        <Element Offset="48" Vartype="Pointer" Bytesize="8" Description="classData" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="Pointer" Bytesize="8" Description="charactorData" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="Pointer" Bytesize="8" Description="weaponData" DisplayMethod="Unsigned Integer"/>
        <Element Offset="72" Vartype="Pointer" Bytesize="8" Description="leveldata" DisplayMethod="Unsigned Integer"/>
        <Element Offset="80" Vartype="4 Bytes" Bytesize="4" Description="selectLanguage" DisplayMethod="Unsigned Integer"/>
        <Element Offset="84" Vartype="4 Bytes" Bytesize="4" Description="move_offsetx" DisplayMethod="Unsigned Integer"/>
        <Element Offset="88" Vartype="4 Bytes" Bytesize="4" Description="move_offsety" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="UnitCTRL.Static" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements/>
    </Structure>
  </Structures>
  <Comments>Game         : Langrisser I &amp; II (Steam)
Author       : Jim00000
Last Update  : 03.14.2020
CE Version   : Support CE 7.0 or above
URL          : https://github.com/Jim00000/Langrisser-I-And-II-Cheat-Table
[Cheat Table Contents]
- Fund Pointer
- Set Class Point (CP) as 999
- Set Attack 999 (effect on player-controlled units)
- Set Defense 999 (effect on player-controlled units)
- Set Magic Attack 999 (effect on player-controlled units)
- God Mode (effect on Player/Ally)
- No MP Consumption (effect on Player/Ally)
- No Magic Effect Timer Decrement (effect on Player/Ally)
- Full Move Range (effect on Player)
- Unlimited Move In This Turn (effect on Player)
- Make All Units Become Player-Controlled
[ChangeLog]
03.14.2020 update
- Add "Set Attack 999" cheat
- Add "Set Defense 999" cheat
- Add "Set Magic Attack 999" cheat
- Add "Set Class Point (CP) as 999" cheat
- Add "No Eagic Effect Timer Decrement" cheat
- Add "Full Move Range" cheat
- Add "Unlimited move in this turn" cheat
- Add "Make All Units Become Player-Controlled" cheat
03.13.2020 update
- Initial release
[MIT License]
Copyright (c) 2020 Jim00000
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</Comments>
</CheatTable>
